#!/bin/bash
# Copyright (C) 2016 Emil Hellman

# A simple bash script for managing passwords securely with gpg
GK_HOME="$HOME/.gatekeeper"
GK_CONF="$GK_HOME/gatekeeper.conf"
GK_IFS=`echo -n -e '\037'`

GK_GPG_COMMAND="gpg --no-use-agent --logger-file $GK_HOME/gatekeeper.log"

if [[ -f $GK_CONF ]]; then
    source $GK_CONF
fi

# creates a encrypted file in the settings location
function gatekeeper_init {
    
    mkdir -p $GK_HOME
    GK_PASSFILE="$GK_HOME/passfile"
    echo "Where to store passwords (if empty will use default: $GK_PASSFILE)"
    read a_path
    if [[ -n $a_path ]]; then
        GK_PASSFILE=$a_path
    fi

    if [[ -f $GK_PASSFILE ]]; then
        echo "$GK_PASSFILE already exists!"
        exit 1
    fi

    echo "GK_PASSFILE=$GK_PASSFILE" > $GK_CONF

    cat | $GK_GPG_COMMAND -c --output $GK_PASSFILE -  <<EOF 
# GK_PASSFILE version 0.0.1
# With format:
#  <mnemonic>US<username>US<password>
# where US denotes the unit-separator ascii character: \037

EOF
     exit 0
}

# prints out user for the mnemonic and puts the password in the clipboard
function gatekeeper_mnemonic {
    if [[ -z $1 ]]; then
        cat <<EOF
Usage: $GK_COMMAND <mnemonic> 
       $GK_COMMAND mnemonic <mnemonic>

The second form needs to be used if <mnemonic> is one of the possible 
gatekeeper sub commands (e.g. init, ls, set, mnemonic).
EOF
        exit 2
    fi

    
    local GK_ENTRY=`$GK_GPG_COMMAND --decrypt $GK_PASSFILE | grep -e "^$1$GK_IFS"`
    local oIFS=$IFS
    IFS=$GK_IFS   
    read GK_mnemonic GK_username GK_pass <<< "$GK_ENTRY"
    IFS=$oIFS

    xclip -selection clipboard <<< $GK_pass

    echo -e "Username for mneonic '$GK_mnemonic' is: $GK_username"
    echo "Password is in clipboard"
}

# appends an entry to encrypted file and puts password (generated if not supplied) in clipboard.
function gatekeeper_set {
    local GK_PASS=`pwgen -s -c -n -y -N 1 16`
    if [[ $# -lt 2 ]]; then
        cat <<EOF
Usage: $GK_COMMAND set <mnemonic> <user> [password]

Stores the mnemonic user and password (generated if not supplied) and puts
the password in the clipboard.
EOF
        exit 2
    fi
    if [[ $# -eq 3 ]]; then
        GK_PASS=$3
    fi

    echo "Enter master password:"
    read -s GK_MASTERPASS

    local GK_CONTENTS=`$GK_GPG_COMMAND --passphrase "$GK_MASTERPASS" --decrypt $GK_PASSFILE`
    grep -q -s "^$1$GK_IFS" <<< "$GK_CONTENTS"
    if [[ $? -eq 0 ]]; then
        while true; do
            echo "Mnemonic already in use. Overwrite (y/n)?"
            read yn

            if [[ "$yn" = "y" ]]; then
                break;
            elif [[ "$yn" = "n" ]]; then
                exit 0
            fi
        done
    fi

    GK_CONTENTS=`grep -s -v "^$1$GK_IFS" <<< "$GK_CONTENTS"`
    
    $GK_GPG_COMMAND --yes --passphrase "$GK_MASTERPASS" -c --output $GK_PASSFILE <(
        echo "$GK_CONTENTS"
        echo "$1$GK_IFS$2$GK_IFS$GK_PASS"
    )

    xclip -selection clipboard <<< $GK_PASS
}

function gatekeeper_ls {
    echo "Enter master password:"
    read -s GK_MASTERPASS

    local GK_CONTENTS=`$GK_GPG_COMMAND --passphrase "$GK_MASTERPASS" --decrypt $GK_PASSFILE`

    (
        echo "Mnemonic${GK_IFS}User"
        grep "$GK_IFS" <<< "$GK_CONTENTS" | cut -d$nIFS -f1-2
    ) | column -t -s"$GK_IFS"
    
}


function gatekeeper_usage {
    cat <<EOF
Usage: $GK_COMMAND <mnemonic>
       $GK_COMMAND <command> [args]

Providing a mnemonic puts the associated password into the clipboard and
prints the user info provided when the mnemonic was set.

Copyright (C) 2016 Emil Hellman

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

EOF
}

GK_COMMAND=$(basename $0)
SUB_COMMAND="$1"
COMMAND_FUNC="gatekeeper_$SUB_COMMAND"

if [[ $(type -t "$COMMAND_FUNC") = function ]]; then
    shift

    $COMMAND_FUNC $@
else
    if [[ -z $1 ]]; then
        gatekeeper_usage
        exit 2
    fi

    gatekeeper_mnemonic "$@"
    
fi
